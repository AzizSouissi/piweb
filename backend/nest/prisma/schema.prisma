// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                              String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                       DateTime           @default(now())
  updatedAt                       DateTime           @updatedAt
  email                           String             @unique
  firstname                       String?
  lastname                        String?
  address                         String?
  birthday                        String?
  degree                          String?
  number                          Int?
  hash                            String
  hashedAt                        String?
  hashedRt                        String?
  attendanceRecord                AttendanceRecord[]
  roleId                          String[]           @db.ObjectId
  roles                           Role[]             @relation(fields: [roleId], references: [id])
  basicSalary                     Int?
  offDays                         Int?
  payrolls                        Payroll[]
  familySituation                 String?
  childrenUnder20Number           Int?
  universityStudentChildrenNumber Int?
  crippledChildrenNumber          Int?

  @@map("users")
}

model Role {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  privilegeId String[]    @db.ObjectId
  privileges  Privilege[] @relation(fields: [privilegeId], references: [id])

  userId String[] @db.ObjectId
  users  User[]   @relation(fields: [userId], references: [id])

  @@map("roles")
}

model Privilege {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  roleId String[] @db.ObjectId
  roles  Role[]   @relation(fields: [roleId], references: [id])

  @@map("privileges")
}

model PasswordResetToken {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  token      String
  email      String
  expiryDate String
}

model AttendanceRecord {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  date          String
  shiftType     ShiftType?
  status        Status
  absent_reason String?
  user          User       @relation(fields: [userId], references: [id])
  userId        String     @db.ObjectId
}

// Define enum for status
model Payroll {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @db.ObjectId
  month         DateTime
  basicSalary   Float
  cnssdeduction Float
  taxableSalary Float
  irpp          Float
  css           Float
  allowances    Allowance[]
  deductions    Deduction[]
  netSalary     Int
}

model Allowance {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  payroll     Payroll @relation(fields: [payrollId], references: [id])
  payrollId   String  @db.ObjectId
  description String
  amount      Float
}

model Deduction {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  payroll     Payroll @relation(fields: [payrollId], references: [id])
  payrollId   String  @db.ObjectId
  description String
  amount      Float
}

model Notification {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  recipientId String
  content     String
  category    String
  readAt      DateTime?
  canceledAt  DateTime?
  createdAt   DateTime  @default(now())
}

model Config {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  companyName  String
  cnssrib      String
  payDay       DateTime
  delayPayment Int
  cssrate      Int
}

enum Status {
  PRESENT
  ABSENT
}

enum ShiftType {
  FULL_DAY
  HALF_DAY
  QUARTER_SHIFT
}

model Holiday {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  date     String
  duration String
  shift    Shift
}

// Define an enum for the shift types
enum Shift {
  DAY_ONLY
  NIGHT_ONLY
  BOTH_SHIFTS
}
